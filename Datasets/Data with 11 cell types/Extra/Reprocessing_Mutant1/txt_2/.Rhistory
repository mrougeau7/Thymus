obj33.2[1,1] = obj33.2[1,1]-1
obj33.2[100,1] = obj33.2[100,1]-1
obj33.2[1,100] = obj33.2[1,100]-1
obj33.2[100,100]=obj33.2[100,100]-1
# turn your species count matrices into vector; script won't work unless you do this
count1.2 <- as.vector(obj1.2)
count2.2 <- as.vector(obj2.2)
count3.2 <- as.vector(obj3.2)
count4.2 <- as.vector(obj4.2)
count5.2 <- as.vector(obj5.2)
count6.2 <- as.vector(obj6.2)
count7.2 <- as.vector(obj7.2)
count8.2 <- as.vector(obj8.2)
count9.2 <- as.vector(obj9.2)
count10.2 <- as.vector(obj10.2)
count11.2 <- as.vector(obj11.2)
count12.2 <- as.vector(obj12.2)
count13.2 <- as.vector(obj13.2)
count14.2 <- as.vector(obj14.2)
count15.2 <- as.vector(obj15.2)
count16.2 <- as.vector(obj16.2)
count17.2 <- as.vector(obj17.2)
count18.2 <- as.vector(obj18.2)
count19.2 <- as.vector(obj19.2)
count20.2 <- as.vector(obj20.2)
count21.2 <- as.vector(obj21.2)
count22.2 <- as.vector(obj22.2)
count23.2 <- as.vector(obj23.2)
count24.2 <- as.vector(obj24.2)
count25.2 <- as.vector(obj25.2)
count26.2 <- as.vector(obj26.2)
count27.2 <- as.vector(obj27.2)
count28.2 <- as.vector(obj28.2)
count29.2 <- as.vector(obj29.2)
count30.2 <- as.vector(obj30.2)
count31.2 <- as.vector(obj31.2)
count32.2 <- as.vector(obj32.2)
count33.2 <- as.vector(obj33.2)
# get coordinates for your species count matrices
rownumber2 <- rep(seq(1,nrow(obj1.2),by=1), times=ncol(obj1.2))
colnumber2 <- rep(1:ncol(obj1.2), each = nrow(obj1.2))
# turn coordinates and species counts into new matrix that can be input into vegan
input2 <- cbind(count1.2, count2.2, count3.2, count4.2, count5.2, count6.2, count7.2, count8.2, count9.2, count10.2, count11.2, count12.2, count13.2, count14.2, count15.2, count16.2, count17.2, count18.2, count19.2,count20.2, count21.2, count22.2, count23.2, count24.2, count25.2, count26.2, count27.2, count28.2, count29.2, count30.2, count31.2, count32.2, count33.2)
input2.1 <- cbind(count1.2, count4.2, count7.2, count10.2, count13.2, count16.2, count19.2, count22.2, count25.2, count28.2, count31.2)
input2.2 <- cbind(count2.2, count5.2, count8.2, count11.2, count14.2, count17.2, count20.2, count23.2, count26.2, count29.2, count32.2)
input2.3 <- cbind(count3.2, count6.2, count9.2, count12.2, count15.2, count18.2, count21.2, count24.2, count27.2, count30.2, count33.2)
#write.csv(input, file="Totalcounts100_Thymus1Mutant.txt")
#This outputs the community matrix that I use for clustering.  I then open this file and remove the first column (it's just numbering the column)
```
The next step is clustering.
First, download and load these packages:
```{r}
library (vegan)
library(labdsv)
# Load the files after reformatting them from CellProfiler
#spe<-read.table("Totalcounts100_Thymus1Mutant.txt", head=T, sep="\t")
spe<-input
spe1.1=input1.1
spe1.2=input1.2
spe1.3=input1.3
spe2=input2
spe2.1=input2.1
spe2.2=input2.2
spe2.3=input2.3
#only use one of above; if spe<-input works then you don't have to manipulate in Excel :)
# This step normalizes your data and is optional.
#spe.std <- decostand(spe, "normalize")  #You can also use "standardize". See 'help' for details.
# Do the k-means clustering [read 'help' for the 'kmeans' function to see what the arguments "centers" (clusters or k) and "nstart" (randomizations) mean].
spe.kmeans <- kmeans(spe, centers=4, nstart=100)
spe.kmeans1.1 <- kmeans(spe1.1, centers=4, nstart=100)
spe.kmeans1.2 <- kmeans(spe1.2, centers=4, nstart=100)
spe.kmeans1.3 <- kmeans(spe1.3, centers=4, nstart=100)
spe.kmeans2 <- kmeans(spe2, centers=4, nstart=100)
spe.kmeans2.1 <- kmeans(spe2.1, centers=4, nstart=100)
spe.kmeans2.2 <- kmeans(spe2.2, centers=4, nstart=100)
spe.kmeans2.3 <- kmeans(spe2.3, centers=4, nstart=100)
#fix nstart before "real" science
write.table(spe.kmeans$cluster, file="spe.kmeans_Thymus1WT_K4_100.csv", sep=",")
write.table(spe.kmeans1.1$cluster, file="spe.kmeans_Thymus1WT_K4_100_Sec1.csv", sep=",")
write.table(spe.kmeans1.2$cluster, file="spe.kmeans_Thymus1WT_K4_100_Sec2.csv", sep=",")
write.table(spe.kmeans1.3$cluster, file="spe.kmeans_Thymus1WT_K4_100_Sec3.csv", sep=",")
write.table(spe.kmeans2$cluster, file="spe.kmeans2_Thymus1Mutant_K4_100.csv", sep=",")
write.table(spe.kmeans2.1$cluster, file="spe.kmeans2_Thymus1Mutant_K4_100_Sec1.csv", sep=",")
write.table(spe.kmeans2.2$cluster, file="spe.kmeans2_Thymus1Mutant_K4_100_Sec2.csv", sep=",")
write.table(spe.kmeans2.3$cluster, file="spe.kmeans2_Thymus1Mutant_K4_100_Sec3.csv", sep=",")
#This file contains the clusters.  I reupload and reformat it back into a 2D matrix and add colors to show what the section looks like.
library(gplots)
spe_1=read.table("spe.kmeans_Thymus1WT_K4_100.csv", head=T, sep=",")
spe_1.1=read.table("spe.kmeans_Thymus1WT_K4_100_Sec1.csv", head=T, sep=",")
spe_1.2=read.table("spe.kmeans_Thymus1WT_K4_100_Sec2.csv", head=T, sep=",")
spe_1.3=read.table("spe.kmeans_Thymus1WT_K4_100_Sec3.csv", head=T, sep=",")
spe_2=read.table("spe.kmeans2_Thymus1Mutant_K4_100.csv", head=T, sep=",")
spe_2.1=read.table("spe.kmeans2_Thymus1Mutant_K4_100_Sec1.csv", head=T, sep=",")
spe_2.2=read.table("spe.kmeans2_Thymus1Mutant_K4_100_Sec2.csv", head=T, sep=",")
spe_2.3=read.table("spe.kmeans2_Thymus1Mutant_K4_100_Sec3.csv", head=T, sep=",")
# DO NOT GET CONFUSED WITH THIS SPE2!!!!
spematrix=data.matrix(spe_1)
spematrix1.1=data.matrix(spe_1.1)
spematrix1.2=data.matrix(spe_1.2)
spematrix1.3=data.matrix(spe_1.3)
spematrix2=data.matrix(spe_2)
spematrix2.1=data.matrix(spe_2.1)
spematrix2.2=data.matrix(spe_2.2)
spematrix2.3=data.matrix(spe_2.3)
matrix = matrix(spematrix, nrow = 100, ncol=100)
matrix1.1 = matrix(spematrix1.1, nrow = 100, ncol=100)
matrix1.2 = matrix(spematrix1.2, nrow = 100, ncol=100)
matrix1.3 = matrix(spematrix1.3, nrow = 100, ncol=100)
matrix2 = matrix(spematrix2, nrow = 100, ncol=100)
matrix2.1 = matrix(spematrix2.1, nrow = 100, ncol=100)
matrix2.2 = matrix(spematrix2.2, nrow = 100, ncol=100)
matrix2.3 = matrix(spematrix2.3, nrow = 100, ncol=100)
heatmap.2( matrix, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix1.1, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1.1,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix1.2, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1.2,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix1.3, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1.3,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix2, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix2,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix2.1, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix2.1,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix2.2, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix2.2,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix2.3, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix2.3,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
#change the colors to reflect the number of clusters.  Can also reorder so colors are consistent between sections.
```
Next Step: Figuring out how clustering is done
We can see that we've asked R to take cell count info from 11 cell types and make 4 clusters
```{r}
#dimnames(spe.kmeans$centers)[2]
#unique(spe.kmeans$cluster)
```
It turns out that cluster 1 is just _empty_ space - but not clusters 2-4
#need automatic way to identify _empty_ outside of thymus
```{r}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans$cluster)){
barplot(colSums(spe[which(spe.kmeans$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans1.1$cluster)){
barplot(colSums(spe1.1[which(spe.kmeans1.1$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans1.2$cluster)){
barplot(colSums(spe1.2[which(spe.kmeans1.2$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans1.3$cluster)){
barplot(colSums(spe1.3[which(spe.kmeans1.3$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans2$cluster)){
barplot(colSums(spe2[which(spe.kmeans2$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans2.1$cluster)){
barplot(colSums(spe2.1[which(spe.kmeans2.1$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans2.2$cluster)){
barplot(colSums(spe2.2[which(spe.kmeans2.2$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
my.order<-c(1,2,3,4) # define the order we want to plot panels
par(mfrow=c(2,2)) # make 4 subplots in 2x2 style
for (i in 1:max(spe.kmeans2.3$cluster)){
barplot(colSums(spe2.3[which(spe.kmeans2.3$cluster==i),]),main=i,ylim=c(0,12000))
# we pick out desired cluster and plot
}
```
We can make a running sum of all the counts of all cell types by cluster
```{r}
b2<-colSums(spe[which(spe.kmeans$cluster==1),])
b3<-colSums(spe[which(spe.kmeans$cluster==3),])
b4<-colSums(spe[which(spe.kmeans$cluster==4),])
b2_S1<-colSums(spe1.1[which(spe.kmeans1.1$cluster==1),])
b3_S1<-colSums(spe1.1[which(spe.kmeans1.1$cluster==2),])
b4_S1<-colSums(spe1.1[which(spe.kmeans1.1$cluster==3),])
b2_S2<-colSums(spe1.2[which(spe.kmeans1.2$cluster==4),])
b3_S2<-colSums(spe1.2[which(spe.kmeans1.2$cluster==1),])
b4_S2<-colSums(spe1.2[which(spe.kmeans1.2$cluster==2),])
b2_S3<-colSums(spe1.3[which(spe.kmeans1.3$cluster==2),])
b3_S3<-colSums(spe1.3[which(spe.kmeans1.3$cluster==4),])
b4_S3<-colSums(spe1.3[which(spe.kmeans1.3$cluster==1),])
b2.2<-colSums(spe2[which(spe.kmeans2$cluster==2),])
b3.2<-colSums(spe2[which(spe.kmeans2$cluster==3),])
b4.2<-colSums(spe2[which(spe.kmeans2$cluster==1),])
b2.2_S1<-colSums(spe2.1[which(spe.kmeans2.1$cluster==1),])
b3.2_S1<-colSums(spe2.1[which(spe.kmeans2.1$cluster==3),])
b4.2_S1<-colSums(spe2.1[which(spe.kmeans2.1$cluster==2),])
b2.2_S2<-colSums(spe2.2[which(spe.kmeans2.2$cluster==4),])
b3.2_S2<-colSums(spe2.2[which(spe.kmeans2.2$cluster==2),])
b4.2_S2<-colSums(spe2.2[which(spe.kmeans2.2$cluster==1),])
b2.2_S3<-colSums(spe2.3[which(spe.kmeans2.3$cluster==4),])
b3.2_S3<-colSums(spe2.3[which(spe.kmeans2.3$cluster==2),])
b4.2_S3<-colSums(spe2.3[which(spe.kmeans2.3$cluster==1),])
```
and normalize these so that each cluster type has the same total amount of cells (in other words, we're getting the proportion of cell types in each cluster)
```{r}
b2<-b2/sum(b2)
b3<-b3/sum(b3)
b4<-b4/sum(b4)
b2_S1<-b2/sum(b2_S1)
b3_S1<-b3/sum(b3_S1)
b4_S1<-b4/sum(b4_S1)
b2_S2<-b2/sum(b2_S2)
b3_S2<-b3/sum(b3_S2)
b4_S2<-b4/sum(b4_S2)
b2_S3<-b2/sum(b2_S3)
b3_S3<-b3/sum(b3_S3)
b4_S3<-b4/sum(b4_S3)
b2.2<-b2.2/sum(b2.2)
b3.2<-b3.2/sum(b3.2)
b4.2<-b4.2/sum(b4.2)
b2.2_S1<-b2.2/sum(b2.2_S1)
b3.2_S1<-b3.2/sum(b3.2_S1)
b4.2_S1<-b4.2/sum(b4.2_S1)
b2.2_S2<-b2.2/sum(b2.2_S2)
b3.2_S2<-b3.2/sum(b3.2_S2)
b4.2_S2<-b4.2/sum(b4.2_S2)
b2.2_S3<-b2.2/sum(b2.2_S3)
b3.2_S3<-b3.2/sum(b3.2_S3)
b4.2_S3<-b4.2/sum(b4.2_S3)
```
We can look at the difference between pairs of clusters to see which cell types are most different between clusters
```{r}
par(mfrow=c(2,2))
barplot(b2-b3,main="2-3")
barplot(b2-b4,main="2-4")
barplot(b3-b4,main="3-4")
par(mfrow=c(2,2))
barplot(b2.2-b3.2,main="2-3")
barplot(b2.2-b4.2,main="2-4")
barplot(b3.2-b4.2,main="3-4")
```
The way to read the last plots is for something like "2-3", positive bars mean that cell type is more common in cluster 2 (than 3); negative bars mean the opposite. The higher the absolute number on the y-axis, the greater the difference is in that cell count between the two clusters. I think (as John suggested), that we can move ahead and be more formal with this analysis (e.g. Bray Curtis dissimilarity), but this is a useful first step.
## Mary's plan for Bray Curtis
In R, the analogy to re-oarganizing data by either pivot tables, or manual calculation and pasting into a new sheet, is to manipulate one data frame to another. The 'dplyr' package or the 'aggregate' function can both help you here. For most standard ecology metrics there are usually one or more packages that make our life easier. Here the 'vegan' package is useful. In this example, we work out Bray-Curtis for all clusters (pairwise comparison)
df<-NULL
df2<-NULL
#these nulls are here to reset the dataframes from the rbind that is below, only important if iteratign across commands outside of KNITR
```{r message=FALSE, comment=""}
library(vegan) # you may need to install this if you don't have it
library(dplyr) # ditto (used for chaining and manipulation)
# http://blog.rstudio.org/2014/01/17/introducing-dplyr/
#df<-spe[which(spe.kmeans$cluster==1),] %>% colSums() %>% t() # example of chaining.
#reads as: take only cluster 1 data from 'spe', then take column sums (i.e. total cell type count)
#then transpose (swap rows/cols needed for bray curtis calc)
df<-spe[which(spe.kmeans$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp<-spe[which(spe.kmeans$cluster==j),] %>% colSums() %>% t()
df<-rbind(df,tmp)
}
df1.1<-spe1.1[which(spe.kmeans1.1$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp1.1<-spe1.1[which(spe.kmeans1.1$cluster==j),] %>% colSums() %>% t()
df1.1<-rbind(df1.1,tmp1.1)
}
df1.2<-spe1.2[which(spe.kmeans1.2$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp1.2<-spe1.2[which(spe.kmeans1.2$cluster==j),] %>% colSums() %>% t()
df1.2<-rbind(df1.2,tmp1.2)
}
df1.3<-spe1.3[which(spe.kmeans1.3$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp1.3<-spe1.3[which(spe.kmeans1.3$cluster==j),] %>% colSums() %>% t()
df1.3<-rbind(df1.3,tmp1.3)
}
df2<-spe2[which(spe.kmeans2$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp2<-spe2[which(spe.kmeans2$cluster==j),] %>% colSums() %>% t()
df2<-rbind(df2,tmp2)
}
df2.1<-spe2.1[which(spe.kmeans2.1$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp2.1<-spe2.1[which(spe.kmeans2.1$cluster==j),] %>% colSums() %>% t()
df2.1<-rbind(df2.1,tmp2.1)
}
df2.2<-spe2.2[which(spe.kmeans2.2$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp2.2<-spe2.2[which(spe.kmeans2.2$cluster==j),] %>% colSums() %>% t()
df2.2<-rbind(df2.2,tmp2.2)
}
df2.3<-spe2.3[which(spe.kmeans2.3$cluster==1),] %>% colSums() %>% t()
for (j in 1:4){
tmp2.3<-spe2.3[which(spe.kmeans2.3$cluster==j),] %>% colSums() %>% t()
df2.3<-rbind(df2.3,tmp2.3)
}
#df2<-df #df2 should be your second thymus  JW
rownames(df)<-c("cluster1","cluster2","cluster3","cluster4")
rownames(df1.1)<-c("cluster1.1","cluster2.1","cluster3.1","cluster4.1")
rownames(df1.2)<-c("cluster1.2","cluster2.2","cluster3.2","cluster4.2")
rownames(df1.3)<-c("cluster1.3","cluster2.3","cluster3.3","cluster4.3")
rownames(df2)<-c("cluster1_M", "cluster2_M","cluster3_M","cluster4_M")
rownames(df2.1)<-c("cluster1.1_M","cluster2.1_M","cluster3.1_M","cluster4.1_M")
rownames(df2.2)<-c("cluster1.2_M","cluster2.2_M","cluster3.2_M","cluster4.2_M")
rownames(df2.3)<-c("cluster1.3_M","cluster2.3_M","cluster3.3_M","cluster4.3_M")
df<-apply(df,2,as.integer) %>% as.data.frame()
df1.1<-apply(df1.1,2,as.integer) %>% as.data.frame()
df1.2<-apply(df1.2,2,as.integer) %>% as.data.frame()
df1.3<-apply(df1.3,2,as.integer) %>% as.data.frame()
df2<-apply(df2,2,as.integer) %>% as.data.frame()
df2.1<-apply(df2.1,2,as.integer) %>% as.data.frame()
df2.2<-apply(df2.2,2,as.integer) %>% as.data.frame()
df2.3<-apply(df2.3,2,as.integer) %>% as.data.frame()
dfTOTAL<-rbind(df, df1.1, df1.2, df1.3, df2, df2.1, df2.2, df2.3)
BrayCurtis<-vegdist(dfTOTAL,method="bray")
print(BrayCurtis)
hc<-hclust(BrayCurtis)
plot(hc)
```
Wildtype1-11 cell types
Count1<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD11c_1.txt",header=T,sep="\t",fill=TRUE)
Count2<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD11c_2.txt",header=T,sep="\t",fill=TRUE)
Count3<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD11c_3.txt",header=T,sep="\t",fill=TRUE)
Count4<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD25_1.txt",header=T,sep="\t",fill=TRUE)
Count5<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD25_2.txt",header=T,sep="\t",fill=TRUE)
Count6<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD25_3.txt",header=T,sep="\t",fill=TRUE)
Count7<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD31_1.txt",header=T,sep="\t",fill=TRUE)
Count8<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD31_2.txt",header=T,sep="\t",fill=TRUE)
Count9<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD31_3.txt",header=T,sep="\t",fill=TRUE)
Count10<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD205_1.txt",header=T,sep="\t",fill=TRUE)
Count11<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD205_2.txt",header=T,sep="\t",fill=TRUE)
Count12<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/CD205_3.txt",header=T,sep="\t",fill=TRUE)
Count13<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Claud5_1.txt",header=T,sep="\t",fill=TRUE)
Count14<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Claud5_2.txt",header=T,sep="\t",fill=TRUE)
Count15<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Claud5_3.txt",header=T,sep="\t",fill=TRUE)
Count16<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Claud34_1.txt",header=T,sep="\t",fill=TRUE)
Count17<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Claud34_2.txt",header=T,sep="\t",fill=TRUE)
Count18<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Claud34_3.txt",header=T,sep="\t",fill=TRUE)
Count19<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Foxp3_1.txt",header=T,sep="\t",fill=TRUE)
Count20<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Foxp3_2.txt",header=T,sep="\t",fill=TRUE)
Count21<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/Foxp3_3.txt",header=T,sep="\t",fill=TRUE)
Count22<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/K5_1.txt",header=T,sep="\t",fill=TRUE)
Count23<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/K5_2.txt",header=T,sep="\t",fill=TRUE)
Count24<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/K5_3.txt",header=T,sep="\t",fill=TRUE)
Count25<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/K14_1.txt",header=T,sep="\t",fill=TRUE)
Count26<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/K14_2.txt",header=T,sep="\t",fill=TRUE)
Count27<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/K14_3.txt",header=T,sep="\t",fill=TRUE)
Count28<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/PDGFRb_1.txt",header=T,sep="\t",fill=TRUE)
Count29<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/PDGFRb_2.txt",header=T,sep="\t",fill=TRUE)
Count30<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/PDGFRb_3.txt",header=T,sep="\t",fill=TRUE)
Count31<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/UEA1_1.txt",header=T,sep="\t",fill=TRUE)
Count32<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/UEA1_2.txt",header=T,sep="\t",fill=TRUE)
Count33<-read.table("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1/UEA1_3.txt",header=T,sep="\t",fill=TRUE)
setwd("~/GitHub/Thymus/Datasets/Data with 11 cell types/Extra/Reprocessing_Mutant1/txt_2")
library(gplots)
msz=100
cluster=4
txtfiles=list.files(pattern="*.txt")  #loads in order
mat<-matrix(data=NA,nrow=10000,ncol=33) #this will change with size of matrix and # of sections/cell types
toFill<-as.data.frame(mat)
toUse0<-seq(1,33,1)
toUse1<-seq(1,33,3)
toUse2<-seq(2,33,3)
toUse3<-seq(3,33,3)
# define which vector to query here
inLoop<-toUse1
for(i in inLoop){
tmp = read.table(txtfiles[i], sep="\t", head=T)
X=tmp[[1]]  #[,1]
Y=tmp[[2]]
my.xy<-hist2d(X,Y,nbins=c(msz,msz))
obj <- my.xy$counts
obj[1,1] = obj[1,1]-1
obj[100,1] = obj[100,1]-1
obj[1,100] = obj[1,100]-1
obj[100,100]=obj[100,100]-1
count<- as.vector(obj)
toFill[,i]<-count
}
result<-toFill[,inLoop]
#names(result)<-inLoop #Maybe rename columns?
#result->result0   ###All sections
result->result1   ###Section 1
#result->result2   ###Section2
#result->result3   ###Section3
library (vegan)
library(labdsv)
spe.kmeans_Mutant1_S1 <- kmeans(result1, centers=cluster, nstart=10)
v = spe.kmeans_Mutant1_S1$cluster
u = unique(v)
u[1]="blank"
u[2]="cortex"
u[3]="medulla_first"
u[4]="medulla_second"
u
matrix1tot = matrix(u, nrow = 100, ncol=100)
matrix1tot
matrix1tot[,1]
matrix1tot[1,1]
v = spe.kmeans_Mutant1_S1$cluster
u = unique(v)
for (i in 1:max(v)){
i=u
}
i
matrix1tot = matrix(i, nrow = 100, ncol=100)
matrix1tot
matrix1tot[1,1]
u[1,1]
u[1,1]
u[,1]
v = spe.kmeans_Mutant1_S1$cluster
u = unique(v)
u[1]= 1
u[2]= 2
u[3]= 3
u[4]= 4
matrix1tot = matrix(u, nrow = 100, ncol=100)
factor(matrix1tot, exclude="blank")
heatmap.2( matrix1tot, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=u,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix1tot, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1tot,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
matrix1tot = matrix(u, nrow = 100, ncol=100)
heatmap.2( matrix1tot, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1tot,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
heatmap.2( matrix1tot, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1tot,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
matrix1tot = matrix(v, nrow = 100, ncol=100)
heatmap.2( matrix1tot, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1tot,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
matrix1tot = matrix(v, nrow = 100, ncol=100)
factor(matrix1tot, exclude="blank")
heatmap.2( matrix1tot, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1tot,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
matrix1tot = matrix(v, nrow = 100, ncol=100)
factor(matrix1tot, exclude=1)
heatmap.2( matrix1tot, Rowv=FALSE, Colv=FALSE, dendrogram='none', cellnote=matrix1tot,
notecol="black", trace='none', key=FALSE,lwid = c(.01,0.99),lhei = c(.01,.99),
margins = c(0,0),col=c("green", "yellow", "blue", "red"))
matrix1tot = matrix(u, nrow = 100, ncol=100)
matrix1tot
u
u[1]= 1
u[2]= 2
u[3]= 3
u[4]= 4
matrix1tot = matrix(u, nrow = 100, ncol=100)
matrix1tot
matrix1tot[100,100]
matrix1tot[1,1]
matrix1[100,0]
matrix1tot[100,0]
v = spe.kmeans_Mutant1_S1$cluster
v
v = spe.kmeans_Mutant1_S1$cluster
u = unique(v)
u[1]
u[1]== 1
u[1]= 1
u[1]
u[1]= 1
u[2]= 2
u[3]= 3
u[4]= 4
matrix1tot = matrix(u, nrow = 100, ncol=100)
matrix1tot
u
matrix1tot
u[100,100]
u[100]
u[4]
u[1,4]
u
u = unique(v)
u
u[1]
v = u[1]
v = u[1]
v
v = spe.kmeans_Mutant1_S1$cluster
v
which(v == u[1])
v <- spe.kmeans_Mutant1_S1$cluster
u <- unique(v)
u
which(v,u[1])
which(v=4)
