Piout<-div@Pi
Piout
div<-diversity.stats(div)
Piout<-div@Pi
Piout
div<-diversity.stats(div,pi=TRUE)
Piout<-div@Pi
Piout
seqalign
length(seqalign)
Snnoutput
nornum<-c(as.character(unlist(north$Tip)))
length(nornum)
sizeA<-length(nornum)
sizeB<-length(southnum)
#be sure and only pull from within austropsit
randnor<-sample(austropsit$Tip,sizeA,replace=T)
randsou<-sample(austropsit$Tip,sizeB,replace=T)
randnor
randsou
for (i in 1:1000) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=T))))
randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=T))))
randiv<-set.populations(div,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
for (i in 1:1000) {
ranSnnout = NULL
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=T))))
randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=T))))
randiv<-set.populations(div,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
ranSnnout = NULL
for (i in 1:1000) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=T))))
randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=T))))
randiv<-set.populations(div,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
ranSnnout = NULL
for (i in 1:10) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=T))))
randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=T))))
randiv<-set.populations(div,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
ranSnnout[1]
ranSnnout[2]
ranSnnout[3]
ranSnnout[4]
randiv<-readData("~/Desktop/Pico MS/alignout")
ranSnnout = NULL
for (i in 1:10) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=T))))
randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=T))))
randiv<-set.populations(randiv,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
ranSnnout[1]
ranSnnout[6]
ranSnnout[9]
randiv<-readData("~/Desktop/Pico MS/alignout")
ranSnnout = NULL
for (i in 1:10) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=F))))
randiv<-set.populations(randiv,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
ranSnnout[1]
ranSnnout[2]
ranSnnout[3]
ranSnnout[4]
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
randsou<-austropsit$Tip[-c(randnor)]
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
randsou<-setdiff(austropsit$Tip, randnor)
randnor
randsou
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
randsou<-c(as.character(unlist(setdiff(austropsit$Tip, randnor))))
randnor
randsou
ranSnnout = NULL
for (i in 1:10) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
#randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=F))))
#randsou should be whatever is not picked from austropsit into randnor, otherwise biases the values down, cannot sample w replace
randsou<-c(as.character(unlist(setdiff(austropsit$Tip, randnor))))
randiv<-set.populations(randiv,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
ranSnnout[1]
ranSnnout[2]
ranSnnout[3]
ranSnnout = NULL
reps = 10
for (i in 1:reps) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
#randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=F))))
#randsou should be whatever is not picked from austropsit into randnor, otherwise biases the values down, cannot sample w replace
randsou<-c(as.character(unlist(setdiff(austropsit$Tip, randnor))))
randiv<-set.populations(randiv,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
for (i in 1:reps) {
SnnP <- sum(Snnoutput > ranSnnout[i])/reps
}
div<-readData("~/Desktop/Pico MS/alignout")
nornum<-c(as.character(unlist(north$Tip)))
southnum<-c(as.character(unlist(south$Tip)))
APonly<-c(as.character(unlist(austropsit$Tip)))
#dummies for now
#nornum<-c("1","3","5","7","9")
#southnum<-c("2","4","6","8","10")
div<-set.populations(div,list(APonly,nornum,southnum)) #this makes no sense but APonly should recapitulate my earlier estimate of D as about -2
div<-neutrality.stats(div)
Tajout<-div@Tajima.D
div<-diversity.stats(div,pi=TRUE)
Piout<-div@Pi
Piout<-Piout/div@n.sites
Totsites<-div@n.sites
Varsites<-div@n.biallelic.sites
TiTv<-div@trans.transv.ratio
div<-set.populations(div,list(nornum,southnum))
div@region.data@populations2
Snn<-F_ST.stats.2(div,snn=TRUE)
Snnoutput<-Snn@Hudson.Snn
sizeA<-length(nornum)
sizeB<-length(southnum)
#be sure and only pull from within austropsit
#randiv<-readData("~/Desktop/Pico MS/alignout")
ranSnnout = NULL
reps = 10
for (i in 1:reps) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
#randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=F))))
#randsou should be whatever is not picked from austropsit into randnor, otherwise biases the values down, cannot sample w replace
randsou<-c(as.character(unlist(setdiff(austropsit$Tip, randnor))))
randiv<-set.populations(randiv,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
for (i in 1:reps) {
SnnP <- sum(Snnoutput > ranSnnout[i])/reps
}
SnnP
reps = 100
for (i in 1:reps) {
randnor<-c(as.character(unlist(sample(austropsit$Tip,sizeA,replace=F))))
#randsou<-c(as.character(unlist(sample(austropsit$Tip,sizeB,replace=F))))
#randsou should be whatever is not picked from austropsit into randnor, otherwise biases the values down, cannot sample w replace
randsou<-c(as.character(unlist(setdiff(austropsit$Tip, randnor))))
randiv<-set.populations(randiv,list(randnor,randsou))
randiv@region.data@populations2
ranSnn<-F_ST.stats.2(randiv,snn=TRUE)
ranSnnout[i]<-ranSnn@Hudson.Snn
}
for (i in 1:reps) {
SnnP <- sum(Snnoutput > ranSnnout[i])/reps
}
SnnP
quantile(ranSnnout)
quantile(ranSnnout,probs=c(0.05,0.95))
Snnoutput
quantile(ranSnnout,probs=c(0.05,0.1,0.9,0.95))
ecdf(ranSnnout)
aaa<-ecdf(ranSnnout)
aaa(Snnoutput)
divline=(-30)
data<-read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
data
genodat<-df2genind(data,sep=/,ncode=7,ploidy=,type='codom')
genodat<-df2genind(data,sep="/",ncode=7,ploidy=,type='codom')
library(adegenet)
genodat<-df2genind(data,sep="/",ncode=7,ploidy=,type='codom')
genodat
genodat<-df2genind(data,sep="/",ncode=7,ploidy=,type='codom',pop=data$popn)
data<-read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
genodat<-df2genind(data,sep="/",ncode=7,ploidy=,type='codom',pop=data$popn)
genodat
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
popn<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2)
genodat<-df2genind(data,sep="/",ncode=7,ploidy=,type='codom',pop=popn)
genodat
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
popn<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2)
genodat<-df2genind(data,sep="/",ncode=7,ploidy=,type='codom',pop=popn)
genodat
genodat@loc.names
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
Dmicronames <- subset(Dmicro,Dmicro$indiv)
Dmicronames <- Dmicro$indiv
Dmicropops <- Dmicro$popn
Dmicrodata <- Dmicro[,3:6]
Dmicrodata <- Dmicro[3:6,]
Dmicrodata
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
Dmicronames <- Dmicro$indiv
Dmicropops <- Dmicro$popn
Dmicrodata <- Dmicro[3:6,]
Dmicrodata
Dmicronames <- Dmicro$indiv
Dmicropops <- Dmicro$popn
Dmicroinfo <- c(Dmicronames,Dmicropops)
Dmicrodata<-c(unlist(setdiff(Dmicro, Dmicroinfo)))
Dmicrodata
genodat<-df2genind(data,sep="/",ncode=7,ploidy=,type='codom',pop=popn)
genodat
Dmicrodata<-Dmicro[,3:6]
Dmicrodata
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop=popn)
genodat
genodat@ind.names
genodat@loc.names
genodat@loc.nall
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
Dmicronames <- Dmicro$indiv
Dmicropops <- Dmicro$popns
Dmicrodata<-Dmicro[,3:6]
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop=popn)
genodat
genodat@ind.names
genodat@loc.names
genodat@loc.nall
genodat@pop
fstat(genodat)
install.packages("hierfstat")
library(hierfstat)
fstat(genodat)
dapc(genodat)
dapc(genodat)
Daphdapc<-dapc(genodat)
scatter(Daphdapc)
assignplot(Daphdapc)
compoplot(Daphdapc)
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop=Dmicropops)
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
Dmicronames <- Dmicro$indiv
Dmicropops <- Dmicro$popns
Dmicrodata<-Dmicro[,3:6]
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop="Dmicropops"")
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop="Dmicropops")
genodat
genodat@ind.names
genodat@loc.names
genodat@loc.nall
genodat@pop
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop=Dmicropops)
genodat
genodat@ind.names
genodat@loc.names
genodat@loc.nall
genodat@pop
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop="Dmicropops")
genodat
genodat@ind.names
genodat@loc.names
genodat@loc.nall
genodat@pop
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
Dmicronames <- Dmicro$indiv
Dmicropops <- Dmicro$popn
Dmicrodata<-Dmicro[,3:6]
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop=Dmicropops)
genodat
genodat@ind.names
genodat@loc.names
genodat@loc.nall
genodat@pop
library(hierfstat)
fstat(genodat)
dapc(genodat)
citation(adegenet)
reference(adegenet)
citation
citation("adegenet")
library(adegenet)
Dmicro <- read.table("~/Desktop/Laevis/genotypes.txt",header=TRUE)
Dmicronames <- Dmicro$indiv
Dmicropops <- Dmicro$popn
Dmicrodata<-Dmicro[,3:6]
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom',pop=Dmicropops)
genodat
genodat@ind.names
genodat@loc.names
alleles<-genodat@loc.nall
genodat@pop
library(hierfstat)
Fst<-fstat(genodat, fstonly=TRUE)
Daphdapc<-dapc(genodat,n.pca=10,n.da=3)
grp <- find.clusters(genodat, n.pca=200, scale=FALSE)
grp <- find.clusters(genodat, max.n.clusters=10)
grp <- find.clusters(genodat, max.n.clusters=10)
grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10)
grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10,n.clusters=2)
scatter(Daphdapc)
scatter(Daphdapc, scree.da=FALSE, bg="white",pch=20,cell=0,cstar=0,col=myCol, solid=0.4, cex=3,clab=0,leg=TRUE,txt.leg=paste("Cluster",1:3))
scatter(Daphdapc, scree.da=FALSE, bg="white",pch=20,cell=0,cstar=0, solid=0.4, cex=3,clab=0,leg=TRUE,txt.leg=paste("Cluster",1:3))
scatter(Daphdapc)
compoplot(Daphdapc)
compoplot(Daphdapc,n.clusters=2)
?compoplot
Daphdapc<-dapc(genodat,n.pca=40,n.da=1)
compoplot(Daphdapc,n.clusters=2)
assignplot(Daphdapc)
Daphdapc
Daphdapc<-dapc(genodat,n.pca=40,n.da=1)
compoplot(Daphdapc)
Daphdapc<-dapc(genodat,n.pca=40,n.da=0)
compoplot(Daphdapc)
Daphdapc<-dapc(genodat,n.pca=40,n.da=3)
#scatter(Daphdapc, scree.da=FALSE, bg="white",pch=20,cell=0,cstar=0, solid=0.4, cex=3,clab=0,leg=TRUE,txt.leg=paste("Cluster",1:3))
#scatter(Daphdapc)
#grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10,n.clusters=2)
#assignplot(Daphdapc)
compoplot(Daphdapc)
Daphdapc<-dapc(genodat,n.pca=40,n.da=8)
#scatter(Daphdapc, scree.da=FALSE, bg="white",pch=20,cell=0,cstar=0, solid=0.4, cex=3,clab=0,leg=TRUE,txt.leg=paste("Cluster",1:3))
#scatter(Daphdapc)
#grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10,n.clusters=2)
#assignplot(Daphdapc)
compoplot(Daphdapc)
Daphdapc<-dapc(genodat,n.pca=40,n.da=2)
#scatter(Daphdapc, scree.da=FALSE, bg="white",pch=20,cell=0,cstar=0, solid=0.4, cex=3,clab=0,leg=TRUE,txt.leg=paste("Cluster",1:3))
#scatter(Daphdapc)
#grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10,n.clusters=2)
#assignplot(Daphdapc)
compoplot(Daphdapc)
Daphdapc<-dapc(genodat,n.pca=30,n.da=2)
#scatter(Daphdapc, scree.da=FALSE, bg="white",pch=20,cell=0,cstar=0, solid=0.4, cex=3,clab=0,leg=TRUE,txt.leg=paste("Cluster",1:3))
#scatter(Daphdapc)
#grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10,n.clusters=2)
#assignplot(Daphdapc)
compoplot(Daphdapc)
genodat<-df2genind(Dmicrodata,sep="/",ncode=7,ploidy=,type='codom')
genodat
genodat@ind.names
genodat@loc.names
alleles<-genodat@loc.nall
genodat@pop
library(hierfstat)
Fst<-fstat(genodat, fstonly=TRUE)
Daphdapc<-dapc(genodat,n.pca=30,n.da=2)
#scatter(Daphdapc, scree.da=FALSE, bg="white",pch=20,cell=0,cstar=0, solid=0.4, cex=3,clab=0,leg=TRUE,txt.leg=paste("Cluster",1:3))
#scatter(Daphdapc)
#grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10,n.clusters=2)
#assignplot(Daphdapc)
compoplot(Daphdapc)
grp <- find.clusters(genodat, n.pca=10,max.n.clusters=10,n.clusters=2)
install.packages("muscle")
install.packages("seqinr")
install.packages("mapdata")
JehlGB <- read.table("JehliusSeqs.tsv",header=TRUE,colClasses=c("Sequence"="character"))
setwd("~/Dropbox/JehliusTiny")
seqinr::write.fasta(sst, names=JehlGB$Label,file.out = "testJ.fasta")
JehlGB <- read.table("JehliusSeqs.tsv",header=TRUE,colClasses=c("Sequence"="character"))
sst <- strsplit(JehlGB$Sequence, "")
# to transform to a FASTA file and use it with the "muscle" package
seqinr::write.fasta(sst, names=JehlGB$Label,file.out = "testJ.fasta")
muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
muscle::muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
muscle::muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/alignoutPaulaJohn/testJalign.fasta")
seqalignM<-muscle("testJ.fasta")
library(muscle)
seqalignM<-muscle("testJ.fasta")
muscle::muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/alignoutPaulaJohn/testJalign.fasta")
muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/testJalign.fasta")
muscle("testJ.fasta",out=NULL)
setwd("~/Desktop")
muscle("testJ.fasta",out="~/Dropbox/JehliusTiny/testJalign.fasta")
write.fasta(seqalignM,"~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
seqalignM<-muscle::muscle("testJ.fasta")
seqalignM<-muscle::muscle("testJ.fasta")
library(ape)
library(muscle)
library(seqinr)
library(maps)
library(mapdata)
library(maptools)
library(oce)
library(ocedata)
library(proj4)
library(mapproj)
JehlGB <- read.table("JehliusSeqs.tsv",header=TRUE,colClasses=c("Sequence"="character"))
JehlGB <- read.table("~/Dropbox/JehliusTiny/JehliusSeqs.tsv",header=TRUE,colClasses=c("Sequence"="character"))
sst <- strsplit(JehlGB$Sequence, "")
seqinr::write.fasta(sst, names=JehlGB$Label,file.out = "testJ.fasta")
seqalignM<-muscle::muscle("testJ.fasta")
write.fasta(seqalignM,"~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
write.fasta(seqalignM,file="~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
write.fasta(seqalignM, file = "~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
write.fasta(seqalignM, file = "testJalign.fasta")
write.fasta(seqalignM, file="testJalign.fasta")
write.fasta(seqalignM, "testJalign.fasta")
str(seqalignM)
write.fasta(seqalignM, "testJalign.fasta")
write.fasta(seqalignM, file="testJalign.fasta")
write.fasta(seqalignM, file="out.fas")
write.fasta(seqalignM, file=NULL)
write.fasta(seqalignM, file = "out.afa")
muscle::write.fasta(seqalignM, file = "out.afa")
muscle::write.fasta(seqalignM, file = "~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
muscle
seqalignM<-muscle::muscle("testJ.fasta")
muscle::write.fasta(seqalignM, file = "~/Dropbox/JehliusTiny/alignoutPaula/testJalign.fasta")
setwd(~/Dropbox/JehliusTiny)
setwd(~Dropbox/JehliusTiny)
setwd(/Dropbox/JehliusTiny)
setwd(Dropbox/JehliusTiny)
JehlGB <- read.table("~/Dropbox/JehliusTiny/JehliusSeqs.tsv",header=TRUE,colClasses=c("Sequence"="character"))
setwd("~/Dropbox/JehliusTiny")
setwd("~/Dropbox/JehliusTiny")
JehlGB <- read.table("JehliusSeqs.tsv",header=TRUE,colClasses=c("Sequence"="character"))
sst <- strsplit(JehlGB$Sequence, "")
seqinr::write.fasta(sst, names=JehlGB$Label,file.out = "testJ.fasta")
seqalignM<-muscle::muscle("testJ.fasta")
muscle::write.fasta(seqalignM, file = "/alignoutPaula/testJalign.fasta")
muscle::write.fasta(seqalignM, file = "alignoutPaula/testJalign.fasta")
str(seqalignM)
seqalignM$seqs->seqData
latlim = c(-50,-14)
lonlim = c(-90,-58)
data(wrld_simpl)
plot(wrld_simpl, xlim=lonlim, ylim=latlim, axes=TRUE,col="gray90")
box()
legend("topleft","Pacific Ocean",bty="n")
mapText(-90,-20,"Pacific Ocean",cex=1.2,col="darkblue",font=4)
lat1 = c(-18.5,-25)
lon1 = c(-70.5,-82)
lat2 = c(-23.6,-25)
lon2 = c(-71.2,-82)
#mapPolygon(lon1,lat1,col=rgb(0,1,0,0.15),border=NA)
#rect(-18,-71,-25,-84,col=rgb(0,1,0,0.15),border=NA)
mapLines(lon1,lat1,col="red",lwd=4,lty=1)
mapLines(lon2,lat2,col="red",lwd=4,lty=1)
lat1 = c(-28.5,-32)
lon1 = c(-71.2,-82)
lat2 = c(-30.9,-32)
lon2 = c(-72,-82)
mapLines(lon1,lat1,col="red",lwd=4,lty=1)
mapLines(lon2,lat2,col="red",lwd=4,lty=1)
lat1 = c(-33.5,-36)
lon1 = c(-72,-82)
lat2 = c(-34.4,-36)
lon2 = c(-72,-82)
mapLines(lon1,lat1,col="red",lwd=4,lty=1)
mapLines(lon2,lat2,col="red",lwd=4,lty=1)
lat1 = c(-39.8,-42)
lon1 = c(-73.2,-82)
lat2 = c(-43.8,-42)
lon2 = c(-72.8,-82)
mapLines(lon1,lat1,col="red",lwd=4,lty=1)
mapLines(lon2,lat2,col="red",lwd=4,lty=1)
mapText(-90,-25,"North n= ",cex=1)
mapText(-85,-25,sizeN,cex=1)
mapText(-92,-32,"N. Central n= ",cex=1)
mapText(-85,-32,sizeNC,cex=1)
mapText(-92,-36,"S. Central n= ",cex=1)
mapText(-85,-36,sizeSC,cex=1)
mapText(-90,-42,"South n= ",cex=1)
mapText(-85,-42,sizeS,cex=1)
lat<-JehlGB$Latitude
long<-JehlGB$Longitude
mapPoints(long,lat,pch=21,col="blue",bg="white",lwd=2,cex=2)
```
```{r, echo=FALSE,fig.width=6,fig.height=6,warning=FALSE,message=FALSE}
celltypes<-c("CD11c","CD25","CD31","CD205","Claud5","Claud34","Foxp3","K5","K14","PDGFRb","UEA1")
numcells<-length(celltypes)
layers<-3
numfiles<-(numcells*layers)
setwd("~/Dropbox/R scripts/Datasets/Data with 11 cell types/WT1")
k=1
WT1 <- vector(mode="list", length=numfiles)
for (i in 1:numcells)
WT1[[k]] <- lapply(Sys.glob(paste(celltypes[i],"*.txt",sep="")), read.table)
k<-k+1
#still working on this!
```
WT[[1]]
WT1[[1]]
WT1[[2]]
WT1[[2]]
WT1[[3]]
k=1
WT1 <- vector(mode="list", length=numfiles)
for (i in 1:numcells)
#  for (j in 1:layers)
WT1[[i]] <- lapply(Sys.glob(paste(celltypes[i],"*.txt",sep="")), read.table)
k<-k+1
#still working on this!
```
