b1_S2_Mutant1<-colSums(result2_Mutant1[which(spe.kmeans_S2_Mutant1$cluster==1),])
b2_S2_Mutant1<-colSums(result2_Mutant1[which(spe.kmeans_S2_Mutant1$cluster==2),])
b3_S2_Mutant1<-colSums(result2_Mutant1[which(spe.kmeans_S2_Mutant1$cluster==3),])
b4_S2_Mutant1<-colSums(result2_Mutant1[which(spe.kmeans_S2_Mutant1$cluster==4),])
b1_S3_Mutant1<-colSums(result3_Mutant1[which(spe.kmeans_S3_Mutant1$cluster==1),])
b2_S3_Mutant1<-colSums(result3_Mutant1[which(spe.kmeans_S3_Mutant1$cluster==2),])
b3_S3_Mutant1<-colSums(result3_Mutant1[which(spe.kmeans_S3_Mutant1$cluster==3),])
b4_S3_Mutant1<-colSums(result3_Mutant1[which(spe.kmeans_S3_Mutant1$cluster==4),])
###and normalize these so that each cluster type has the same total amount of cells (in other words, we're ###getting the proportion of cell types in each cluster)
b1_Mutant1<-b1_Mutant1/sum(b1_Mutant1)
b2_Mutant1<-b2_Mutant1/sum(b2_Mutant1)
b3_Mutant1<-b3_Mutant1/sum(b3_Mutant1)
b4_Mutant1<-b4_Mutant1/sum(b4_Mutant1)
b1_S1_Mutant1<-b1_S1_Mutant1/sum(b1_S1_Mutant1)
b2_S1_Mutant1<-b2_S1_Mutant1/sum(b2_S1_Mutant1)
b3_S1_Mutant1<-b3_S1_Mutant1/sum(b3_S1_Mutant1)
b4_S1_Mutant1<-b4_S1_Mutant1/sum(b4_S1_Mutant1)
b1_S2_Mutant1<-b1_S2_Mutant1/sum(b1_S2_Mutant1)
b2_S2_Mutant1<-b2_S2_Mutant1/sum(b2_S2_Mutant1)
b3_S2_Mutant1<-b3_S2_Mutant1/sum(b3_S2_Mutant1)
b4_S2_Mutant1<-b4_S2_Mutant1/sum(b4_S2_Mutant1)
b1_S3_Mutant1<-b1_S3_Mutant1/sum(b1_S3_Mutant1)
b2_S3_Mutant1<-b2_S3_Mutant1/sum(b2_S3_Mutant1)
b3_S3_Mutant1<-b3_S3_Mutant1/sum(b3_S3_Mutant1)
b4_S3_Mutant1<-b4_S3_Mutant1/sum(b4_S3_Mutant1)
df_Mutant1<-result0_Mutant1[which(spe.kmeans_All_Mutant1$cluster==1),] %>% colSums() %>% t()   # example of chaining.
for (j in 2:4){
tmp_Mutant1<-result0_Mutant1[which(spe.kmeans_All_Mutant1$cluster==j),] %>% colSums() %>% t()
df_Mutant1<-rbind(df_Mutant1,tmp_Mutant1)
}
df_S1_Mutant1<-result1_Mutant1[which(spe.kmeans_S1_Mutant1$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S1_Mutant1<-result1_Mutant1[which(spe.kmeans_S1_Mutant1$cluster==j),] %>% colSums() %>% t()
df_S1_Mutant1<-rbind(df_S1_Mutant1,tmp_S1_Mutant1)
}
df_S2_Mutant1<-result2_Mutant1[which(spe.kmeans_S1_Mutant1$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S2_Mutant1<-result2_Mutant1[which(spe.kmeans_S1_Mutant1$cluster==j),] %>% colSums() %>% t()
df_S1_Mutant1<-rbind(df_S1_Mutant1,tmp_S1_Mutant1)
}
df_S3_Mutant1<-result3_Mutant1[which(spe.kmeans_S3_Mutant1$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S3_Mutant1<-result3_Mutant1[which(spe.kmeans_S3_Mutant1$cluster==j),] %>% colSums() %>% t()
df_S3_Mutant1<-rbind(df_S3_Mutant1,tmp_S3_Mutant1)
}
colnames(df_S2_Mutant1)=colnames(df_S1_Mutant1)
colnames(df_S3_Mutant1)<-colnames(df_S1_Mutant1)
#df_Mutant1<-apply(df_Mutant1,2,as.integer) %>% as.data.frame()
#df_S1_Mutant1<-apply(df_S1_Mutant1,2,as.integer) %>% as.data.frame()
#df_S2_Mutant1<-apply(df_S2_Mutant1,2,as.integer) %>% as.data.frame()
#df_S3_Mutant1<-apply(df_S3_Mutant1,2,as.integer) %>% as.data.frame()
#dfTOTAL<-rbind(df_S1_Mutant1,df_S2_Mutant1, df_S3_Mutant1, df_S1_Mutant1, df_S2_Mutant1, df_S3_WT3, df_S1_Mutant1,
#df_S2_Mutant1, df_S3_Mutant1, df_S1_Mutant1, df_S2_Mutant1, df_S3_Mutant3)
dfT_Mutant1=rbind(df_S1_Mutant1,df_S2_Mutant1,df_S3_Mutant1)
BrayCurtis_Mutant1<-vegdist(dfT_Mutant1,method="bray")
#print(BrayCurtis)
hc_Mutant1<-hclust(BrayCurtis_Mutant1)
save.image("Mutant1_150.rdata")
setwd("~/Thymus/Datasets/Data with 11 cell types/WT1")
msz=200  #matrix size in hist2d
cluster=4  #number of clusters produced for K means
txtfiles_WT1=list.files(pattern="*.txt")  #loads in order all files within folder
mat_WT1<-matrix(data=NA,nrow=40000,ncol=33) #this will change with size of matrix and # of sections/cell types
toFill_WT1<-as.data.frame(mat_WT1)  #changes to data frame
toUse0_WT1<-seq(1,33,1) #uses all 33 columns
toUse1_WT1<-seq(1,33,3) #uses columns that correspond to Section1
toUse2_WT1<-seq(2,33,3) #Section2
toUse3_WT1<-seq(3,33,3) #Section3
for(i in toUse0_WT1){
tmp_WT1 = read.table(txtfiles_WT1[i], sep="\t", head=T)
X_WT1=tmp_WT1[[1]]  #[,1]
Y_WT1=tmp_WT1[[2]]
my.xy_WT1<-hist2d(X_WT1,Y_WT1,nbins=c(msz,msz))
obj_WT1 <- my.xy_WT1$counts
obj_WT1[1,1] = obj_WT1[1,1]-1
obj_WT1[200,1] = obj_WT1[200,1]-1
obj_WT1[1,200] = obj_WT1[1,200]-1
obj_WT1[200,200]=obj_WT1[200,200]-1
count_WT1<- as.vector(obj_WT1)
toFill_WT1[,i]<-count_WT1
result_WT1<-toFill_WT1[,toUse0_WT1]
result_WT1->result0_WT1
}
for(i in toUse1_WT1){
tmp_WT1 = read.table(txtfiles_WT1[i], sep="\t", head=T)
X_WT1=tmp_WT1[[1]]  #[,1]
Y_WT1=tmp_WT1[[2]]
my.xy_WT1<-hist2d(X_WT1,Y_WT1,nbins=c(msz,msz))
obj_WT1 <- my.xy_WT1$counts
obj_WT1[1,1] = obj_WT1[1,1]-1
obj_WT1[200,1] = obj_WT1[200,1]-1
obj_WT1[1,200] = obj_WT1[1,200]-1
obj_WT1[200,200]=obj_WT1[200,200]-1
count_WT1<- as.vector(obj_WT1)
toFill_WT1[,i]<-count_WT1
result_WT1<-toFill_WT1[,toUse1_WT1]
result_WT1->result1_WT1
}
for(i in toUse2_WT1){
tmp_WT1 = read.table(txtfiles_WT1[i], sep="\t", head=T)
X_WT1=tmp_WT1[[1]]  #[,1]
Y_WT1=tmp_WT1[[2]]
my.xy_WT1<-hist2d(X_WT1,Y_WT1,nbins=c(msz,msz))
obj_WT1 <- my.xy_WT1$counts
obj_WT1[1,1] = obj_WT1[1,1]-1
obj_WT1[200,1] = obj_WT1[200,1]-1
obj_WT1[1,200] = obj_WT1[1,200]-1
obj_WT1[200,200]=obj_WT1[200,200]-1
count_WT1<- as.vector(obj_WT1)
toFill_WT1[,i]<-count_WT1
result_WT1<-toFill_WT1[,toUse2_WT1]
result_WT1->result2_WT1
}
for(i in toUse3_WT1){
tmp_WT1 = read.table(txtfiles_WT1[i], sep="\t", head=T)
X_WT1=tmp_WT1[[1]]  #[,1]
Y_WT1=tmp_WT1[[2]]
my.xy_WT1<-hist2d(X_WT1,Y_WT1,nbins=c(msz,msz))
obj_WT1 <- my.xy_WT1$counts
obj_WT1[1,1] = obj_WT1[1,1]-1
obj_WT1[200,1] = obj_WT1[200,1]-1
obj_WT1[1,200] = obj_WT1[1,200]-1
obj_WT1[200,200]=obj_WT1[200,200]-1
count_WT1<- as.vector(obj_WT1)
toFill_WT1[,i]<-count_WT1
result_WT1<-toFill_WT1[,toUse3_WT1]
result_WT1->result3_WT1   ###Section3
}
library (vegan)
library(labdsv)
spe.kmeans_All_WT1 <- kmeans(result0_WT1, centers=cluster, nstart=1000)
spe.kmeans_S1_WT1 <- kmeans(result1_WT1, centers=cluster, nstart=1000)
spe.kmeans_S2_WT1 <- kmeans(result2_WT1, centers=cluster, nstart=1000)
spe.kmeans_S3_WT1 <- kmeans(result3_WT1, centers=cluster, nstart=1000)
v0_WT1=spe.kmeans_All_WT1$cluster
v1_WT1=spe.kmeans_S1_WT1$cluster
v2_WT1=spe.kmeans_S2_WT1$cluster
v3_WT1=spe.kmeans_S3_WT1$cluster
#load("thymus.Rdata")
#image(v2) # make pic
v0.1_WT1=matrix(v0_WT1,nrow=200,ncol=200)
v1.1_WT1=matrix(v1_WT1,nrow=200,ncol=200)
v2.1_WT1=matrix(v2_WT1,nrow=200,ncol=200)
v3.1_WT1=matrix(v3_WT1,nrow=200,ncol=200)
b1_WT1<-colSums(result0_WT1[which(spe.kmeans_All_WT1$cluster==1),])
b2_WT1<-colSums(result0_WT1[which(spe.kmeans_All_WT1$cluster==2),])
b3_WT1<-colSums(result0_WT1[which(spe.kmeans_All_WT1$cluster==3),])
b4_WT1<-colSums(result0_WT1[which(spe.kmeans_All_WT1$cluster==4),])
b1_S1_WT1<-colSums(result1_WT1[which(spe.kmeans_S1_WT1$cluster==1),])
b2_S1_WT1<-colSums(result1_WT1[which(spe.kmeans_S1_WT1$cluster==2),])
b3_S1_WT1<-colSums(result1_WT1[which(spe.kmeans_S1_WT1$cluster==3),])
b4_S1_WT1<-colSums(result1_WT1[which(spe.kmeans_S1_WT1$cluster==4),])
b1_S2_WT1<-colSums(result2_WT1[which(spe.kmeans_S2_WT1$cluster==1),])
b2_S2_WT1<-colSums(result2_WT1[which(spe.kmeans_S2_WT1$cluster==2),])
b3_S2_WT1<-colSums(result2_WT1[which(spe.kmeans_S2_WT1$cluster==3),])
b4_S2_WT1<-colSums(result2_WT1[which(spe.kmeans_S2_WT1$cluster==4),])
b1_S3_WT1<-colSums(result3_WT1[which(spe.kmeans_S3_WT1$cluster==1),])
b2_S3_WT1<-colSums(result3_WT1[which(spe.kmeans_S3_WT1$cluster==2),])
b3_S3_WT1<-colSums(result3_WT1[which(spe.kmeans_S3_WT1$cluster==3),])
b4_S3_WT1<-colSums(result3_WT1[which(spe.kmeans_S3_WT1$cluster==4),])
b1_WT1<-b1_WT1/sum(b1_WT1)
b2_WT1<-b2_WT1/sum(b2_WT1)
b3_WT1<-b3_WT1/sum(b3_WT1)
b4_WT1<-b4_WT1/sum(b4_WT1)
b1_S1_WT1<-b1_S1_WT1/sum(b1_S1_WT1)
b2_S1_WT1<-b2_S1_WT1/sum(b2_S1_WT1)
b3_S1_WT1<-b3_S1_WT1/sum(b3_S1_WT1)
b4_S1_WT1<-b4_S1_WT1/sum(b4_S1_WT1)
b1_S2_WT1<-b1_S2_WT1/sum(b1_S2_WT1)
b2_S2_WT1<-b2_S2_WT1/sum(b2_S2_WT1)
b3_S2_WT1<-b3_S2_WT1/sum(b3_S2_WT1)
b4_S2_WT1<-b4_S2_WT1/sum(b4_S2_WT1)
b1_S3_WT1<-b1_S3_WT1/sum(b1_S3_WT1)
b2_S3_WT1<-b2_S3_WT1/sum(b2_S3_WT1)
b3_S3_WT1<-b3_S3_WT1/sum(b3_S3_WT1)
b4_S3_WT1<-b4_S3_WT1/sum(b4_S3_WT1)
df_WT1<-result0_WT1[which(spe.kmeans_All_WT1$cluster==1),] %>% colSums() %>% t()   # example of chaining.
for (j in 2:4){
tmp_WT1<-result0_WT1[which(spe.kmeans_All_WT1$cluster==j),] %>% colSums() %>% t()
df_WT1<-rbind(df_WT1,tmp_WT1)
}
df_S1_WT1<-result1_WT1[which(spe.kmeans_S1_WT1$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S1_WT1<-result1_WT1[which(spe.kmeans_S1_WT1$cluster==j),] %>% colSums() %>% t()
df_S1_WT1<-rbind(df_S1_WT1,tmp_S1_WT1)
}
df_S2_WT1<-result2_WT1[which(spe.kmeans_S1_WT1$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S2_WT1<-result2_WT1[which(spe.kmeans_S1_WT1$cluster==j),] %>% colSums() %>% t()
df_S1_WT1<-rbind(df_S1_WT1,tmp_S1_WT1)
}
df_S3_WT1<-result3_WT1[which(spe.kmeans_S3_WT1$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S3_WT1<-result3_WT1[which(spe.kmeans_S3_WT1$cluster==j),] %>% colSums() %>% t()
df_S3_WT1<-rbind(df_S3_WT1,tmp_S3_WT1)
}
colnames(df_S2_WT1)=colnames(df_S1_WT1)
colnames(df_S3_WT1)<-colnames(df_S1_WT1)
#df_WT1<-apply(df_WT1,2,as.integer) %>% as.data.frame()
#df_S1_WT1<-apply(df_S1_WT1,2,as.integer) %>% as.data.frame()
#df_S2_WT1<-apply(df_S2_WT1,2,as.integer) %>% as.data.frame()
#df_S3_WT1<-apply(df_S3_WT1,2,as.integer) %>% as.data.frame()
#dfTOTAL<-rbind(df_S1_WT1,df_S2_WT1, df_S3_WT1, df_S1_WT2, df_S2_WT2, df_S3_WT3, df_S1_Mutant1,
#df_S2_Mutant1, df_S3_Mutant1, df_S1_WT1, df_S2_WT1, df_S3_Mutant3)
dfT_WT1=rbind(df_S1_WT1,df_S2_WT1,df_S3_WT1)
BrayCurtis_WT1<-vegdist(dfT_WT1,method="bray")
#print(BrayCurtis)
hc_WT1<-hclust(BrayCurtis_WT1)
save.image("WT1_200.rdata")
setwd("~/Thymus/Datasets/Data with 11 cell types/Mutant2")
msz=200  #matrix size in hist2d
cluster=4  #number of clusters produced for K means
txtfiles_Mutant2=list.files(pattern="*.txt")  #loads in order all files within folder
mat_Mutant2<-matrix(data=NA,nrow=40000,ncol=33) #this will change with size of matrix and # of sections/cell types
toFill_Mutant2<-as.data.frame(mat_Mutant2)  #changes to data frame
toUse0_Mutant2<-seq(1,33,1) #uses all 33 columns
toUse1_Mutant2<-seq(1,33,3) #uses columns that correspond to Section1
toUse2_Mutant2<-seq(2,33,3) #Section2
toUse3_Mutant2<-seq(3,33,3) #Section3
for(i in toUse0_Mutant2){
tmp_Mutant2 = read.table(txtfiles_Mutant2[i], sep="\t", head=T)
X_Mutant2=tmp_Mutant2[[1]]  #[,1]
Y_Mutant2=tmp_Mutant2[[2]]
my.xy_Mutant2<-hist2d(X_Mutant2,Y_Mutant2,nbins=c(msz,msz))
obj_Mutant2 <- my.xy_Mutant2$counts
obj_Mutant2[1,1] = obj_Mutant2[1,1]-1
obj_Mutant2[200,1] = obj_Mutant2[200,1]-1
obj_Mutant2[1,200] = obj_Mutant2[1,200]-1
obj_Mutant2[200,200]=obj_Mutant2[200,200]-1
count_Mutant2<- as.vector(obj_Mutant2)
toFill_Mutant2[,i]<-count_Mutant2
result_Mutant2<-toFill_Mutant2[,toUse0_Mutant2]
result_Mutant2->result0_Mutant2
}
for(i in toUse1_Mutant2){
tmp_Mutant2 = read.table(txtfiles_Mutant2[i], sep="\t", head=T)
X_Mutant2=tmp_Mutant2[[1]]  #[,1]
Y_Mutant2=tmp_Mutant2[[2]]
my.xy_Mutant2<-hist2d(X_Mutant2,Y_Mutant2,nbins=c(msz,msz))
obj_Mutant2 <- my.xy_Mutant2$counts
obj_Mutant2[1,1] = obj_Mutant2[1,1]-1
obj_Mutant2[200,1] = obj_Mutant2[200,1]-1
obj_Mutant2[1,200] = obj_Mutant2[1,200]-1
obj_Mutant2[200,200]=obj_Mutant2[200,200]-1
count_Mutant2<- as.vector(obj_Mutant2)
toFill_Mutant2[,i]<-count_Mutant2
result_Mutant2<-toFill_Mutant2[,toUse1_Mutant2]
result_Mutant2->result1_Mutant2
}
for(i in toUse2_Mutant2){
tmp_Mutant2 = read.table(txtfiles_Mutant2[i], sep="\t", head=T)
X_Mutant2=tmp_Mutant2[[1]]  #[,1]
Y_Mutant2=tmp_Mutant2[[2]]
my.xy_Mutant2<-hist2d(X_Mutant2,Y_Mutant2,nbins=c(msz,msz))
obj_Mutant2 <- my.xy_Mutant2$counts
obj_Mutant2[1,1] = obj_Mutant2[1,1]-1
obj_Mutant2[200,1] = obj_Mutant2[200,1]-1
obj_Mutant2[1,200] = obj_Mutant2[1,200]-1
obj_Mutant2[200,200]=obj_Mutant2[200,200]-1
count_Mutant2<- as.vector(obj_Mutant2)
toFill_Mutant2[,i]<-count_Mutant2
result_Mutant2<-toFill_Mutant2[,toUse2_Mutant2]
result_Mutant2->result2_Mutant2
}
for(i in toUse3_Mutant2){
tmp_Mutant2 = read.table(txtfiles_Mutant2[i], sep="\t", head=T)
X_Mutant2=tmp_Mutant2[[1]]  #[,1]
Y_Mutant2=tmp_Mutant2[[2]]
my.xy_Mutant2<-hist2d(X_Mutant2,Y_Mutant2,nbins=c(msz,msz))
obj_Mutant2 <- my.xy_Mutant2$counts
obj_Mutant2[1,1] = obj_Mutant2[1,1]-1
obj_Mutant2[200,1] = obj_Mutant2[200,1]-1
obj_Mutant2[1,200] = obj_Mutant2[1,200]-1
obj_Mutant2[200,200]=obj_Mutant2[200,200]-1
count_Mutant2<- as.vector(obj_Mutant2)
toFill_Mutant2[,i]<-count_Mutant2
result_Mutant2<-toFill_Mutant2[,toUse3_Mutant2]
result_Mutant2->result3_Mutant2   ###Section3
}
library (vegan)
library(labdsv)
spe.kmeans_All_Mutant2 <- kmeans(result0_Mutant2, centers=cluster, nstart=1000)
spe.kmeans_S1_Mutant2 <- kmeans(result1_Mutant2, centers=cluster, nstart=1000)
spe.kmeans_S2_Mutant2 <- kmeans(result2_Mutant2, centers=cluster, nstart=1000)
spe.kmeans_S3_Mutant2 <- kmeans(result3_Mutant2, centers=cluster, nstart=1000)
library(gplots) ###Call 1 set at a time; produces image of section
v0_Mutant2=spe.kmeans_All_Mutant2$cluster
v1_Mutant2=spe.kmeans_S1_Mutant2$cluster
v2_Mutant2=spe.kmeans_S2_Mutant2$cluster
v3_Mutant2=spe.kmeans_S3_Mutant2$cluster
#load("thymus.Rdata")
#image(v2) # make pic
v0.1_Mutant2=matrix(v0_Mutant2,nrow=200,ncol=200)
v1.1_Mutant2=matrix(v1_Mutant2,nrow=200,ncol=200)
v2.1_Mutant2=matrix(v2_Mutant2,nrow=200,ncol=200)
v3.1_Mutant2=matrix(v3_Mutant2,nrow=200,ncol=200)
b1_Mutant2<-colSums(result0_Mutant2[which(spe.kmeans_All_Mutant2$cluster==1),])
b2_Mutant2<-colSums(result0_Mutant2[which(spe.kmeans_All_Mutant2$cluster==2),])
b3_Mutant2<-colSums(result0_Mutant2[which(spe.kmeans_All_Mutant2$cluster==3),])
b4_Mutant2<-colSums(result0_Mutant2[which(spe.kmeans_All_Mutant2$cluster==4),])
b1_S1_Mutant2<-colSums(result1_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==1),])
b2_S1_Mutant2<-colSums(result1_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==2),])
b3_S1_Mutant2<-colSums(result1_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==3),])
b4_S1_Mutant2<-colSums(result1_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==4),])
b1_S2_Mutant2<-colSums(result2_Mutant2[which(spe.kmeans_S2_Mutant2$cluster==1),])
b2_S2_Mutant2<-colSums(result2_Mutant2[which(spe.kmeans_S2_Mutant2$cluster==2),])
b3_S2_Mutant2<-colSums(result2_Mutant2[which(spe.kmeans_S2_Mutant2$cluster==3),])
b4_S2_Mutant2<-colSums(result2_Mutant2[which(spe.kmeans_S2_Mutant2$cluster==4),])
b1_S3_Mutant2<-colSums(result3_Mutant2[which(spe.kmeans_S3_Mutant2$cluster==1),])
b2_S3_Mutant2<-colSums(result3_Mutant2[which(spe.kmeans_S3_Mutant2$cluster==2),])
b3_S3_Mutant2<-colSums(result3_Mutant2[which(spe.kmeans_S3_Mutant2$cluster==3),])
b4_S3_Mutant2<-colSums(result3_Mutant2[which(spe.kmeans_S3_Mutant2$cluster==4),])
###and normalize these so that each cluster type has the same total amount of cells (in other words, we're ###getting the proportion of cell types in each cluster)
b1_Mutant2<-b1_Mutant2/sum(b1_Mutant2)
b2_Mutant2<-b2_Mutant2/sum(b2_Mutant2)
b3_Mutant2<-b3_Mutant2/sum(b3_Mutant2)
b4_Mutant2<-b4_Mutant2/sum(b4_Mutant2)
b1_S1_Mutant2<-b1_S1_Mutant2/sum(b1_S1_Mutant2)
b2_S1_Mutant2<-b2_S1_Mutant2/sum(b2_S1_Mutant2)
b3_S1_Mutant2<-b3_S1_Mutant2/sum(b3_S1_Mutant2)
b4_S1_Mutant2<-b4_S1_Mutant2/sum(b4_S1_Mutant2)
b1_S2_Mutant2<-b1_S2_Mutant2/sum(b1_S2_Mutant2)
b2_S2_Mutant2<-b2_S2_Mutant2/sum(b2_S2_Mutant2)
b3_S2_Mutant2<-b3_S2_Mutant2/sum(b3_S2_Mutant2)
b4_S2_Mutant2<-b4_S2_Mutant2/sum(b4_S2_Mutant2)
b1_S3_Mutant2<-b1_S3_Mutant2/sum(b1_S3_Mutant2)
b2_S3_Mutant2<-b2_S3_Mutant2/sum(b2_S3_Mutant2)
b3_S3_Mutant2<-b3_S3_Mutant2/sum(b3_S3_Mutant2)
b4_S3_Mutant2<-b4_S3_Mutant2/sum(b4_S3_Mutant2)
df_Mutant2<-result0_Mutant2[which(spe.kmeans_All_Mutant2$cluster==1),] %>% colSums() %>% t()   # example of chaining.
for (j in 2:4){
tmp_Mutant2<-result0_Mutant2[which(spe.kmeans_All_Mutant2$cluster==j),] %>% colSums() %>% t()
df_Mutant2<-rbind(df_Mutant2,tmp_Mutant2)
}
df_S1_Mutant2<-result1_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S1_Mutant2<-result1_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==j),] %>% colSums() %>% t()
df_S1_Mutant2<-rbind(df_S1_Mutant2,tmp_S1_Mutant2)
}
df_S2_Mutant2<-result2_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S2_Mutant2<-result2_Mutant2[which(spe.kmeans_S1_Mutant2$cluster==j),] %>% colSums() %>% t()
df_S1_Mutant2<-rbind(df_S1_Mutant2,tmp_S1_Mutant2)
}
df_S3_Mutant2<-result3_Mutant2[which(spe.kmeans_S3_Mutant2$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S3_Mutant2<-result3_Mutant2[which(spe.kmeans_S3_Mutant2$cluster==j),] %>% colSums() %>% t()
df_S3_Mutant2<-rbind(df_S3_Mutant2,tmp_S3_Mutant2)
}
colnames(df_S2_Mutant2)=colnames(df_S1_Mutant2)
colnames(df_S3_Mutant2)<-colnames(df_S1_Mutant2)
#df_Mutant2<-apply(df_Mutant2,2,as.integer) %>% as.data.frame()
#df_S1_Mutant2<-apply(df_S1_Mutant2,2,as.integer) %>% as.data.frame()
#df_S2_Mutant2<-apply(df_S2_Mutant2,2,as.integer) %>% as.data.frame()
#df_S3_Mutant2<-apply(df_S3_Mutant2,2,as.integer) %>% as.data.frame()
#dfTOTAL<-rbind(df_S1_Mutant2,df_S2_Mutant2, df_S3_Mutant2, df_S1_WT2, df_S2_WT2, df_S3_WT3, df_S1_Mutant1,
#df_S2_Mutant1, df_S3_Mutant1, df_S1_Mutant2, df_S2_Mutant2, df_S3_Mutant3)
dfT_Mutant2=rbind(df_S1_Mutant2,df_S2_Mutant2,df_S3_Mutant2)
BrayCurtis_Mutant2<-vegdist(dfT_Mutant2,method="bray")
#print(BrayCurtis)
hc_Mutant2<-hclust(BrayCurtis_Mutant2)
#plot(hc,labels=dfT$rownames)
plot(hc_Mutant2)
save.image("Mutant2_200.rdata")
save.image("Mutant2.rdata")
setwd("~/Thymus/Datasets/Data with 11 cell types/WT2")
msz=200  #matrix size in hist2d
cluster=4  #number of clusters produced for K means
txtfiles_WT2=list.files(pattern="*.txt")  #loads in order all files within folder
mat_WT2<-matrix(data=NA,nrow=40000,ncol=33) #this will change with size of matrix and # of sections/cell types
toFill_WT2<-as.data.frame(mat_WT2)  #changes to data frame
toUse0_WT2<-seq(1,33,1) #uses all 33 columns
toUse1_WT2<-seq(1,33,3) #uses columns that correspond to Section1
toUse2_WT2<-seq(2,33,3) #Section2
toUse3_WT2<-seq(3,33,3) #Section3
for(i in toUse0_WT2){
tmp_WT2 = read.table(txtfiles_WT2[i], sep="\t", head=T)
X_WT2=tmp_WT2[[1]]  #[,1]
Y_WT2=tmp_WT2[[2]]
my.xy_WT2<-hist2d(X_WT2,Y_WT2,nbins=c(msz,msz))
obj_WT2 <- my.xy_WT2$counts
obj_WT2[1,1] = obj_WT2[1,1]-1
obj_WT2[200,1] = obj_WT2[200,1]-1
obj_WT2[1,200] = obj_WT2[1,200]-1
obj_WT2[200,200]=obj_WT2[200,200]-1
count_WT2<- as.vector(obj_WT2)
toFill_WT2[,i]<-count_WT2
result_WT2<-toFill_WT2[,toUse0_WT2]
result_WT2->result0_WT2
}
for(i in toUse1_WT2){
tmp_WT2 = read.table(txtfiles_WT2[i], sep="\t", head=T)
X_WT2=tmp_WT2[[1]]  #[,1]
Y_WT2=tmp_WT2[[2]]
my.xy_WT2<-hist2d(X_WT2,Y_WT2,nbins=c(msz,msz))
obj_WT2 <- my.xy_WT2$counts
obj_WT2[1,1] = obj_WT2[1,1]-1
obj_WT2[200,1] = obj_WT2[200,1]-1
obj_WT2[1,200] = obj_WT2[1,200]-1
obj_WT2[200,200]=obj_WT2[200,200]-1
count_WT2<- as.vector(obj_WT2)
toFill_WT2[,i]<-count_WT2
result_WT2<-toFill_WT2[,toUse1_WT2]
result_WT2->result1_WT2
}
for(i in toUse2_WT2){
tmp_WT2 = read.table(txtfiles_WT2[i], sep="\t", head=T)
X_WT2=tmp_WT2[[1]]  #[,1]
Y_WT2=tmp_WT2[[2]]
my.xy_WT2<-hist2d(X_WT2,Y_WT2,nbins=c(msz,msz))
obj_WT2 <- my.xy_WT2$counts
obj_WT2[1,1] = obj_WT2[1,1]-1
obj_WT2[200,1] = obj_WT2[200,1]-1
obj_WT2[1,200] = obj_WT2[1,200]-1
obj_WT2[200,200]=obj_WT2[200,200]-1
count_WT2<- as.vector(obj_WT2)
toFill_WT2[,i]<-count_WT2
result_WT2<-toFill_WT2[,toUse2_WT2]
result_WT2->result2_WT2
}
for(i in toUse3_WT2){
tmp_WT2 = read.table(txtfiles_WT2[i], sep="\t", head=T)
X_WT2=tmp_WT2[[1]]  #[,1]
Y_WT2=tmp_WT2[[2]]
my.xy_WT2<-hist2d(X_WT2,Y_WT2,nbins=c(msz,msz))
obj_WT2 <- my.xy_WT2$counts
obj_WT2[1,1] = obj_WT2[1,1]-1
obj_WT2[200,1] = obj_WT2[200,1]-1
obj_WT2[1,200] = obj_WT2[1,200]-1
obj_WT2[200,200]=obj_WT2[200,200]-1
count_WT2<- as.vector(obj_WT2)
toFill_WT2[,i]<-count_WT2
result_WT2<-toFill_WT2[,toUse3_WT2]
result_WT2->result3_WT2   ###Section3
}
library (vegan)
library(labdsv)
spe.kmeans_All_WT2 <- kmeans(result0_WT2, centers=cluster, nstart=1000)
spe.kmeans_S1_WT2 <- kmeans(result1_WT2, centers=cluster, nstart=1000)
spe.kmeans_S2_WT2 <- kmeans(result2_WT2, centers=cluster, nstart=1000)
spe.kmeans_S3_WT2 <- kmeans(result3_WT2, centers=cluster, nstart=1000)
v0_WT2=spe.kmeans_All_WT2$cluster
v1_WT2=spe.kmeans_S1_WT2$cluster
v2_WT2=spe.kmeans_S2_WT2$cluster
v3_WT2=spe.kmeans_S3_WT2$cluster
#load("thymus.Rdata")
#image(v2) # make pic
v0.1_WT2=matrix(v0_WT2,nrow=200,ncol=200)
v1.1_WT2=matrix(v1_WT2,nrow=200,ncol=200)
v2.1_WT2=matrix(v2_WT2,nrow=200,ncol=200)
v3.1_WT2=matrix(v3_WT2,nrow=200,ncol=200)
b1_WT2<-colSums(result0_WT2[which(spe.kmeans_All_WT2$cluster==1),])
b2_WT2<-colSums(result0_WT2[which(spe.kmeans_All_WT2$cluster==2),])
b3_WT2<-colSums(result0_WT2[which(spe.kmeans_All_WT2$cluster==3),])
b4_WT2<-colSums(result0_WT2[which(spe.kmeans_All_WT2$cluster==4),])
b1_S1_WT2<-colSums(result1_WT2[which(spe.kmeans_S1_WT2$cluster==1),])
b2_S1_WT2<-colSums(result1_WT2[which(spe.kmeans_S1_WT2$cluster==2),])
b3_S1_WT2<-colSums(result1_WT2[which(spe.kmeans_S1_WT2$cluster==3),])
b4_S1_WT2<-colSums(result1_WT2[which(spe.kmeans_S1_WT2$cluster==4),])
b1_S2_WT2<-colSums(result2_WT2[which(spe.kmeans_S2_WT2$cluster==1),])
b2_S2_WT2<-colSums(result2_WT2[which(spe.kmeans_S2_WT2$cluster==2),])
b3_S2_WT2<-colSums(result2_WT2[which(spe.kmeans_S2_WT2$cluster==3),])
b4_S2_WT2<-colSums(result2_WT2[which(spe.kmeans_S2_WT2$cluster==4),])
b1_S3_WT2<-colSums(result3_WT2[which(spe.kmeans_S3_WT2$cluster==1),])
b2_S3_WT2<-colSums(result3_WT2[which(spe.kmeans_S3_WT2$cluster==2),])
b3_S3_WT2<-colSums(result3_WT2[which(spe.kmeans_S3_WT2$cluster==3),])
b4_S3_WT2<-colSums(result3_WT2[which(spe.kmeans_S3_WT2$cluster==4),])
###and normalize these so that each cluster type has the same total amount of cells (in other words, we're ###getting the proportion of cell types in each cluster)
b1_WT2<-b1_WT2/sum(b1_WT2)
b2_WT2<-b2_WT2/sum(b2_WT2)
b3_WT2<-b3_WT2/sum(b3_WT2)
b4_WT2<-b4_WT2/sum(b4_WT2)
b1_S1_WT2<-b1_S1_WT2/sum(b1_S1_WT2)
b2_S1_WT2<-b2_S1_WT2/sum(b2_S1_WT2)
b3_S1_WT2<-b3_S1_WT2/sum(b3_S1_WT2)
b4_S1_WT2<-b4_S1_WT2/sum(b4_S1_WT2)
b1_S2_WT2<-b1_S2_WT2/sum(b1_S2_WT2)
b2_S2_WT2<-b2_S2_WT2/sum(b2_S2_WT2)
b3_S2_WT2<-b3_S2_WT2/sum(b3_S2_WT2)
b4_S2_WT2<-b4_S2_WT2/sum(b4_S2_WT2)
b1_S3_WT2<-b1_S3_WT2/sum(b1_S3_WT2)
b2_S3_WT2<-b2_S3_WT2/sum(b2_S3_WT2)
b3_S3_WT2<-b3_S3_WT2/sum(b3_S3_WT2)
b4_S3_WT2<-b4_S3_WT2/sum(b4_S3_WT2)
df_WT2<-result0_WT2[which(spe.kmeans_All_WT2$cluster==1),] %>% colSums() %>% t()   # example of chaining.
for (j in 2:4){
tmp_WT2<-result0_WT2[which(spe.kmeans_All_WT2$cluster==j),] %>% colSums() %>% t()
df_WT2<-rbind(df_WT2,tmp_WT2)
}
df_S1_WT2<-result1_WT2[which(spe.kmeans_S1_WT2$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S1_WT2<-result1_WT2[which(spe.kmeans_S1_WT2$cluster==j),] %>% colSums() %>% t()
df_S1_WT2<-rbind(df_S1_WT2,tmp_S1_WT2)
}
df_S2_WT2<-result2_WT2[which(spe.kmeans_S1_WT2$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S2_WT2<-result2_WT2[which(spe.kmeans_S1_WT2$cluster==j),] %>% colSums() %>% t()
df_S1_WT2<-rbind(df_S1_WT2,tmp_S1_WT2)
}
df_S3_WT2<-result3_WT2[which(spe.kmeans_S3_WT2$cluster==1),] %>% colSums() %>% t()
for (j in 2:4){
tmp_S3_WT2<-result3_WT2[which(spe.kmeans_S3_WT2$cluster==j),] %>% colSums() %>% t()
df_S3_WT2<-rbind(df_S3_WT2,tmp_S3_WT2)
}
colnames(df_S2_WT2)=colnames(df_S1_WT2)
colnames(df_S3_WT2)<-colnames(df_S1_WT2)
dfT_WT2=rbind(df_S1_WT2,df_S2_WT2,df_S3_WT2)
BrayCurtis_WT2<-vegdist(dfT_WT2,method="bray")
#print(BrayCurtis)
hc_WT2<-hclust(BrayCurtis_WT2)
save.image("WT2.rdata")
library(phyloseq)
